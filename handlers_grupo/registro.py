from db.constantes import ASIGNATURA_ID, ASIGNATURA_NOMBRE, GRUPO_ASIGNATURA, GRUPO_ID, GRUPO_ID_ASIGNATURA, GRUPO_NOMBRE, GRUPO_PRIVADO, GRUPO_PUBLICO, MATRICULA_ASIGNATURA, MATRICULA_ID_ASIGNATURA, MATRICULA_PROFESOR, USUARIO_ID, USUARIO_NOMBRE, USUARIO_TIPO_PROFESOR
from db.queries import get_asignaturas, get_grupos_tutoria, get_matriculas, get_usuarios, insert_grupo_tutoria
from telebot import types
from handlers_grupo.utils import configurar_logger, es_profesor
import telebot

# Estados

ESPERANDO_ASIGNATURA_GRUPO = "esperando_asignatura_grupo"

from utils.state_manager import *
logger = configurar_logger()

COMMAND_CONFIGURAR_GRUPO = "configurar_grupo"

# Calldata
CONFIG_ASIG = 'config_asig_'
CONFIG_TUTORIA_PRIVADA = 'config_tutoria_privada'

def register_handlers(bot):
    @bot.message_handler(commands=[COMMAND_CONFIGURAR_GRUPO])
    def configurar_grupo(message):
        """
        Inicia el proceso de configuraci√≥n de un grupo como grupo de tutor√≠a
        """
        chat_id = message.chat.id
        user_id = message.from_user.id

        # Verificar que estamos en un grupo
        if message.chat.type not in ['group', 'supergroup']:
            bot.send_message(chat_id, "‚ö†Ô∏è Este comando solo funciona en grupos.")
            return

        # Verificar que el usuario es profesor
        if not es_profesor(user_id):
            bot.send_message(chat_id, "‚ö†Ô∏è Solo los profesores pueden configurar grupos.")
            return

        # Verificar que el bot tiene permisos de administrador
        bot_member = bot.get_chat_member(chat_id, bot.get_me().id)
        if bot_member.status != 'administrator':
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è Para configurar este grupo necesito ser administrador con permisos para:\n"
                "- Invitar usuarios mediante enlaces\n"
                "- Eliminar mensajes\n"
                "- Restringir usuarios"
            )
            return

        # Verificar si el grupo ya est√° configurado
        grupo = get_grupos_tutoria(GRUPO_ID_CHAT=str(chat_id))

        if grupo:
            grupo = grupo[0]
            bot.send_message(chat_id, "‚ÑπÔ∏è Este grupo ya est√° configurado como grupo de tutor√≠a.")
            return

        # Obtener ID del usuario profesor
        profesor_row = get_usuarios(USUARIO_ID_TELEGRAM=str(user_id), USUARIO_TIPO=USUARIO_TIPO_PROFESOR)

        if not profesor_row:
            bot.send_message(chat_id, "‚ö†Ô∏è Solo los profesores registrados pueden configurar grupos.")
            return

        profesor_row = profesor_row[0]

        profesor_id = profesor_row[USUARIO_ID]

        # Obtener SOLO asignaturas sin grupo de avisos asociada

        asignaturas_profesor = get_matriculas(MATRICULA_ID_USUARIO=profesor_id, MATRICULA_TIPO=MATRICULA_PROFESOR)
        grupos = get_grupos_tutoria(GRUPO_ID_USUARIO=profesor_id, GRUPO_TIPO=GRUPO_PUBLICO)
        ids_grupos = [grupo[GRUPO_ID_ASIGNATURA] for grupo in grupos]

        asignaturas_disponibles = []

        for asignatura in asignaturas_profesor:
            if asignatura[ASIGNATURA_ID] not in ids_grupos:
                asignaturas_disponibles.append(asignatura)

        # Verificar si ya tiene grupo de tutor√≠a privada
        tiene_privada = get_grupos_tutoria(GRUPO_ID_USUARIO=profesor_id, GRUPO_TIPO=GRUPO_PRIVADO) != []


        # Verificar si hay asignaturas disponibles
        if not asignaturas_disponibles and not (not tiene_privada):
            mensaje = "‚ö†Ô∏è No hay m√°s asignaturas disponibles para configurar."
            if tiene_privada:
                mensaje += "\n\nYa tienes un grupo configurado para cada asignatura y una grupo de tutor√≠a privado."
            bot.send_message(chat_id, mensaje)
            return

        # Crear teclado con las asignaturas disponibles que no tienen grupo
        markup = types.InlineKeyboardMarkup()

        if asignaturas_disponibles:
            for asig in asignaturas_disponibles:
                callback_data = f"{CONFIG_ASIG}{asig[MATRICULA_ID_ASIGNATURA]}"
                markup.add(types.InlineKeyboardButton(text=asig[MATRICULA_ASIGNATURA], callback_data=callback_data))

        # A√±adir opci√≥n de tutor√≠a privada SOLO si no tiene una ya
        if not tiene_privada:
            markup.add(types.InlineKeyboardButton("Tutor√≠a Privada", callback_data=CONFIG_TUTORIA_PRIVADA))
            print(f"‚úÖ Usuario {user_id} NO tiene grupo privada - Mostrando opci√≥n")
        else:
            print(f"‚ö†Ô∏è Usuario {user_id} YA tiene grupo privada - Ocultando opci√≥n")

        # Comprobar si no hay opciones disponibles
        if not asignaturas_disponibles and tiene_privada:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è No puedes configurar m√°s grupos. Ya tienes una grupo para cada asignatura y una grupo privada."
            )
            return

        # Guardar estado para manejar la siguiente interacci√≥n
        set_state(user_id, ESPERANDO_ASIGNATURA_GRUPO)
        user_data[user_id] = {CHAT_ID: chat_id}

        # Enviar mensaje con las opciones
        mensaje = "üè´ *Configuraci√≥n de grupo de tutor√≠a*\n\n"

        if asignaturas_disponibles:
            mensaje += "Selecciona la asignatura para la que deseas configurar este grupo:"
        else:
            mensaje += "Ya has configurado grupos para todas tus asignaturas."

        # Si ya tiene grupo privada, informarle
        if tiene_privada:
            mensaje += "\n\n*Nota:* Ya tienes un grupo de tutor√≠a privado configurado, por lo que esa opci√≥n no est√° disponible."

        bot.send_message(
            chat_id,
            mensaje,
            reply_markup=markup,
            parse_mode="Markdown"
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith(CONFIG_ASIG))
    def handle_configuracion_asignatura(call):
        user_id = call.from_user.id
        id_asignatura = call.data.split('_')[2]  # Extraer ID de la asignatura

        # Verificar estado
        if get_state(user_id) != ESPERANDO_ASIGNATURA_GRUPO:
            bot.answer_callback_query(call.id, "Esta opci√≥n ya no est√° disponible")
            return

        # Obtener datos guardados
        if user_id not in user_data or CHAT_ID not in user_data[user_id]:
            bot.answer_callback_query(call.id, "Error: Datos no encontrados")
            clear_state(user_id)
            return

        chat_id = user_data[user_id][CHAT_ID]

        try:
            # Registrar el grupo en la base de datos
            # Obtener nombre de la asignatura
            asignatura_nombre = get_asignaturas(ASIGNATURA_ID=id_asignatura)[0][ASIGNATURA_NOMBRE]

            # Obtener Id_usuario del profesor a partir de su TelegramID
            id_usuario_profesor = get_usuarios(USUARIO_ID_TELEGRAM=str(user_id))[0][USUARIO_ID]

            # Cerrar la conexi√≥n temporal

            # Crear enlace de invitaci√≥n si es posible
            try:
                enlace_invitacion = bot.create_chat_invite_link(chat_id).invite_link
            except:
                enlace_invitacion = None

            # Configurar directamente como grupo de avisos (p√∫blica)
            # CORRECCI√ìN: Usar "p√∫blica" con tilde para cumplir con el constraint
            tipo_grupo = GRUPO_PUBLICO  # Cambiado de "publica" a "p√∫blica"
            nuevo_nombre = f"{asignatura_nombre} - Avisos"

            # Cambiar el nombre del grupo
            try:
                bot.set_chat_title(chat_id, nuevo_nombre)
            except Exception as e:
                logger.warning(f"No se pudo cambiar el nombre del grupo: {e}")

            # Crear el grupo en la base de datos
            insert_grupo_tutoria(
                id_usuario_profesor,
                nuevo_nombre,
                tipo_grupo,  # Ahora con el valor correcto "p√∫blica"
                id_asignatura,
                str(chat_id),
                enlace_invitacion
            )

            # Mensaje de √©xito
            bot.edit_message_text(
                f"‚úÖ Grupo configurado exitosamente como grupo de avisos para *{asignatura_nombre}*",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )

            # Enviar mensaje informativo
            descripcion = "Este es un grupo para **avisos generales** de la asignatura donde los estudiantes pueden unirse mediante el enlace de invitaci√≥n."

            bot.send_message(
                chat_id,
                f"üéì *grupo configurado*\n\n"
                f"Este grupo est√° ahora configurado como: *grupo de Avisos*\n\n"
                f"{descripcion}\n\n"
                "Como profesor puedes:\n"
                "‚Ä¢ Gestionar el grupo seg√∫n el prop√≥sito configurado\n"
                "‚Ä¢ Compartir el enlace de invitaci√≥n con tus estudiantes",
                parse_mode="Markdown",
            )

        except Exception as e:
            bot.send_message(chat_id, f"‚ùå Error al configurar grupo: {str(e)}")
            logger.error(f"Error en la selecci√≥n de asignatura {chat_id}: {e}")

        # Limpiar estado
        clear_state(user_id)


    @bot.callback_query_handler(func=lambda call: call.data == CONFIG_TUTORIA_PRIVADA)
    def handle_configuracion_tutoria_privada(call):
        user_id = call.from_user.id

        # Verificar estado
        if get_state(user_id) != ESPERANDO_ASIGNATURA_GRUPO:
            bot.answer_callback_query(call.id, "Esta opci√≥n ya no est√° disponible")
            return

        # Obtener datos guardados
        if user_id not in user_data or CHAT_ID not in user_data[user_id]:
            bot.answer_callback_query(call.id, "Error: Datos no encontrados")
            clear_state(user_id)
            return

        chat_id = user_data[user_id][CHAT_ID]

        try:
            # Registrar el grupo en la base de datos        
            # Obtener Id_usuario y nombre del profesor a partir de su TelegramID
            profesor = get_usuarios(USUARIO_ID_TELEGRAM=str(user_id))[0]
            id_usuario_profesor = profesor[USUARIO_ID]
            nombre_profesor = profesor[USUARIO_NOMBRE]


            # Crear enlace de invitaci√≥n si es posible
            try:
                enlace_invitacion = bot.create_chat_invite_link(chat_id).invite_link
            except:
                enlace_invitacion = None

            # Configurar como grupo de tutor√≠as privadas
            tipo_grupo = GRUPO_PRIVADO
            nuevo_nombre = f"Tutor√≠a Privada - Prof. {nombre_profesor}"

            # Cambiar el nombre del grupo
            try:
                bot.set_chat_title(chat_id, nuevo_nombre)
            except Exception as e:
                logger.warning(f"No se pudo cambiar el nombre del grupo: {e}")

            # Crear el grupo en la base de datos
            insert_grupo_tutoria(
                id_usuario_profesor,
                nuevo_nombre,
                tipo_grupo,
                "0",  # 0 indica que no est√° vinculado a una asignatura espec√≠fica
                str(chat_id),
                enlace_invitacion
            )

            # Mensaje de √©xito
            bot.edit_message_text(
                f"‚úÖ Grupo configurado exitosamente como grupo de tutor√≠as privadas",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )

            # Enviar mensaje informativo
            descripcion = "Este es tu grupo de **tutor√≠as privadas** donde solo pueden entrar estudiantes que invites espec√≠ficamente."

            bot.send_message(
                chat_id,
                f"üéì *grupo configurado*\n\n"
                f"Este grupo est√° ahora configurado como: *grupo de Tutor√≠as Privadas*\n\n"
                f"{descripcion}\n\n"
                "Como profesor puedes:\n"
                "‚Ä¢ Invitar a estudiantes espec√≠ficos para tutor√≠as\n"
                "‚Ä¢ Expulsar estudiantes cuando finalice la consulta",
                parse_mode="Markdown",
            )

        except Exception as e:
            bot.send_message(chat_id, f"‚ùå Error al configurar grupo: {str(e)}")
            logger.error(f"Error en la configuraci√≥n de tutor√≠a privada {chat_id}: {e}")

        # Limpiar estado
        clear_state(user_id)


    @bot.message_handler(content_types=['group_chat_created'])
    def handle_group_creation(message):
        """Responde cuando se crea un nuevo grupo"""
        chat_id = message.chat.id

        print("\n==================================================")
        print(f"üÜïüÜïüÜï NUEVO GRUPO CREADO: {chat_id} üÜïüÜïüÜï")
        print(f"üÜï Creado por: {message.from_user.first_name} (ID: {message.from_user.id})")
        print("==================================================\n")

        bot.send_message(
            chat_id,
            "¬°Gracias por crear un grupo con este bot!\n\n"
            "Para poder configurar correctamente el grupo necesito ser administrador. "
            "Por favor, sigue estos pasos:\n\n"
            "1. Entra en la informaci√≥n del grupo\n"
            "2. Selecciona 'Administradores'\n"
            "3. A√±√°deme como administrador\n"
            "4. Dame todos los permisos que me falten para ser adminsitrador.\n\n"
            f"Una vez me hayas hecho administrador, usa el comando /{COMMAND_CONFIGURAR_GRUPO}."
        )