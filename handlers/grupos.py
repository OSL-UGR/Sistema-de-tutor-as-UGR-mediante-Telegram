# Handlers para cambio de prop√≥sito de grupos de tutor√≠a
import logging
import os
import sys
import telebot
from db.queries import delete_grupo_tutoria, get_grupos_tutoria, get_usuarios
from db.constantes import *

from telebot import types

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', filename='logs/grupos.log')

import traceback

def escape_markdown(text):
    """Escapa caracteres especiales de Markdown"""
    if not text:
        return ""
    
    chars = ['_', '*', '`', '[', ']', '(', ')', '#', '+', '-', '.', '!']
    for char in chars:
        text = text.replace(char, '\\' + char)
    
    return text

def register_handlers(bot):

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_grupo_"))
    def handle_edit_grupo(call):
        """Muestra opciones para editar una grupo"""
        chat_id = call.message.chat.id
        print(f"\n\n### INICIO EDIT_grupo - Callback: {call.data} ###")

        try:
            grupo_id = int(call.data.split("_")[2])
            print(f"üîç grupo ID a editar: {grupo_id}")

            # Verificar que el usuario es el propietario de la grupo
            user = get_usuarios(USUARIO_ID_TELEGRAM=call.from_user.id)[0]
            print(f"üë§ Usuario: {user[USUARIO_NOMBRE] if user else 'No encontrado'}")

            if not user or user[USUARIO_TIPO] != USUARIO_TIPO_PROFESOR:
                print("‚ö†Ô∏è Usuario no es profesor o no existe")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden editar grupos")
                return

            # Obtener datos actuales de la grupo
            print(f"üîç Consultando detalles de grupo ID {grupo_id}")
            grupo = get_grupos_tutoria(GRUPO_ID=grupo_id, GRUPO_ID_USUARIO=user[USUARIO_ID])[0]

            if not grupo:
                print(f"‚ùå grupo no encontrada o no pertenece al usuario")
                bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la grupo o no tienes permisos")
                return

            print(f"‚úÖ grupo encontrada: {grupo[GRUPO_NOMBRE]} (Chat ID: {grupo[GRUPO_ID_CHAT]})")

            # Mostrar opciones simplificadas (solo eliminar)
            print("üîò Generando bot√≥n de eliminaci√≥n...")
            markup = types.InlineKeyboardMarkup(row_width=1)

            # A√±adir opci√≥n para eliminar la grupo
            markup.add(types.InlineKeyboardButton(
                "üóëÔ∏è Eliminar grupo",
                callback_data=f"eliminargrupo_{grupo_id}"
            ))
            print(f"  ‚úì Bot√≥n eliminar con callback: eliminargrupo_{grupo_id}")

            # Bot√≥n para cancelar
            markup.add(types.InlineKeyboardButton(
                "‚ùå Cancelar",
                callback_data=f"cancelar_edicion_{grupo_id}"
            ))

            # Preparar textos seguros para Markdown
            nombre_grupo = escape_markdown(grupo[GRUPO_NOMBRE])
            nombre_asignatura = escape_markdown(grupo[GRUPO_ASIGNATURA] or 'General')

            print(f"üì§ Enviando mensaje de edici√≥n")
            bot.edit_message_text(
                f"üîÑ *Gestionar grupo*\n\n"
                f"*grupo:* {nombre_grupo}\n"
                f"*Asignatura:* {nombre_asignatura}\n\n"
                f"Selecciona la acci√≥n que deseas realizar:",
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup,
                parse_mode="Markdown"
            )
            print("‚úÖ Mensaje de opciones enviado")

        except Exception as e:
            print(f"‚ùå ERROR en handle_edit_grupo: {e}")
            import traceback
            print(traceback.format_exc())

        bot.answer_callback_query(call.id)
        print("‚úÖ Respuesta de callback enviada")
        print(f"### FIN EDIT_grupo - Callback: {call.data} ###\n")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("cancelar_edicion_"))
    def handle_cancelar_edicion(call):
        """Cancela la edici√≥n de la grupo"""
        bot.edit_message_text(
            "‚ùå Operaci√≥n cancelada. No se realizaron cambios.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.answer_callback_query(call.id)


    @bot.callback_query_handler(func=lambda call: call.data.startswith("eliminargrupo_"))
    def handle_eliminar_grupo(call):
        """Maneja la solicitud de eliminaci√≥n de una grupo"""
        chat_id = call.message.chat.id
        print(f"\n\n### INICIO ELIMINAR_grupo - Callback: {call.data} ###")

        try:
            grupo_id = int(call.data.split("_")[1])
            print(f"üîç grupo ID a eliminar: {grupo_id}")

            # Verificar que el usuario es el propietario de la grupo
            user = get_usuarios(USUARIO_ID_TELEGRAM=call.from_user.id)[0]

            if not user or user[USUARIO_TIPO] != USUARIO_TIPO_PROFESOR:
                print("‚ö†Ô∏è Usuario no es profesor o no existe")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden eliminar grupos")
                return

            # Obtener datos de la grupo
            grupo = get_grupos_tutoria(GRUPO_ID=grupo_id, GRUPO_ID_USUARIO=user[USUARIO_ID])[0]

            if not grupo:
                print(f"‚ùå grupo no encontrada o no pertenece al usuario")
                bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la grupo o no tienes permisos")
                return

            print(f"‚úÖ grupo encontrada: {grupo[GRUPO_NOMBRE]} (Chat ID: {grupo[GRUPO_ID_CHAT]})")


            # Preparar textos seguros para Markdown
            nombre_grupo = escape_markdown(grupo[GRUPO_NOMBRE])
            nombre_asignatura = escape_markdown(grupo[GRUPO_ASIGNATURA] or 'General')

            # Confirmar la eliminaci√≥n con botones
            markup = types.InlineKeyboardMarkup(row_width=1)

            markup.add(types.InlineKeyboardButton(
                "‚úÖ S√≠, eliminar esta grupo",
                callback_data=f"confirmar_eliminar_{grupo_id}"
            ))

            markup.add(types.InlineKeyboardButton(
                "‚ùå No, cancelar",
                callback_data=f"cancelar_edicion_{grupo_id}"
            ))

            # Enviar mensaje de confirmaci√≥n
            bot.edit_message_text(
                f"‚ö†Ô∏è *¬øEst√°s seguro de que deseas eliminar esta grupo?*\n\n"
                f"*grupo:* {nombre_grupo}\n"
                f"*Asignatura:* {nombre_asignatura}\n"
                f"Esta acci√≥n es irreversible. El grupo ser√° eliminado de la base de datos ",
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup,
                parse_mode="Markdown"
            )

        except Exception as e:
            print(f"‚ùå ERROR en handle_eliminar_grupo: {e}")
            import traceback
            print(traceback.format_exc())

        bot.answer_callback_query(call.id)
        print("### FIN ELIMINAR_grupo ###")


    @bot.callback_query_handler(func=lambda call: call.data.startswith("confirmar_eliminar_"))
    def handle_confirmar_eliminar(call):
        """Confirma y ejecuta la eliminaci√≥n de la grupo"""
        chat_id = call.message.chat.id
        print(f"\n\n### INICIO CONFIRMAR_ELIMINAR - Callback: {call.data} ###")

        try:
            grupo_id = int(call.data.split("_")[2])
            print(f"üîç grupo ID a eliminar definitivamente: {grupo_id}")

            # Verificar que el usuario es el propietario de la grupo
            user = get_usuarios(USUARIO_ID_TELEGRAM=call.from_user.id)[0]

            if not user or user[USUARIO_TIPO] != USUARIO_TIPO_PROFESOR:
                print("‚ö†Ô∏è Usuario no es profesor o no existe")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è Solo los profesores propietarios pueden eliminar grupos")
                return

            # Obtener datos de la grupo
            grupo = get_grupos_tutoria(GRUPO_ID=grupo_id, GRUPO_ID_USUARIO=user[USUARIO_ID])[0]

            if not grupo:
                print(f"‚ùå grupo no encontrada o no pertenece al usuario")
                bot.answer_callback_query(call.id, "‚ùå No se encontr√≥ la grupo o no tienes permisos")
                return

            nombre_grupo = grupo[GRUPO_NOMBRE]
            telegram_chat_id = grupo[GRUPO_ID_CHAT]
            print(f"‚úÖ Ejecutando eliminaci√≥n de grupo: {nombre_grupo} (ID: {grupo_id}, Chat ID: {telegram_chat_id})")

            # 1. Eliminar la grupo de la base de datos
            print("2Ô∏è‚É£ Eliminando registro de grupo...")
            delete_grupo_tutoria(grupo_id)
            print(f"  ‚úì grupo eliminada de la BD")

            # 2. Confirmar cambios en la base de datos
            print("‚úÖ Cambios en BD confirmados")

            # 3. Enviar mensaje de confirmaci√≥n
            print("4Ô∏è‚É£ Enviando confirmaci√≥n al usuario...")
            bot.edit_message_text(
                f"‚úÖ *grupo eliminado con √©xito*\n\n"
                f"El grupo \"{escape_markdown(nombre_grupo)}\" ha sido eliminado completamente.\n"
                f"Todos los registros asociados han sido eliminados.",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )
            print("  ‚úì Mensaje de confirmaci√≥n enviado")

        except Exception as e:
            print(f"‚ùå ERROR en handle_confirmar_eliminar: {e}")
            import traceback
            print(traceback.format_exc())
            bot.edit_message_text(
                "‚ùå Ha ocurrido un error al intentar eliminar la grupo. Por favor, int√©ntalo de nuevo.",
                chat_id=chat_id,
                message_id=call.message.message_id
            )

        bot.answer_callback_query(call.id)
        print("### FIN CONFIRMAR_ELIMINAR ###")


    @bot.callback_query_handler(func=lambda call: call.data == "ver_grupos")
    def handler_ver_grupos(call):
        """Muestra las grupos actuales del usuario"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        # Depuraci√≥n adicional
        print(f"\n\n### INICIO VER_grupoS CALLBACK ###")
        print(f"üîç Callback data: {call.data}")
        print(f"üë§ User ID: {user_id}, Chat ID: {chat_id}")
        print(f"üìù Message ID: {call.message.message_id}")

        # Responder al callback inmediatamente para evitar el error de "query is too old"
        try:
            bot.answer_callback_query(call.id)
            print("‚úÖ Callback respondido correctamente")
        except Exception as e:
            print(f"‚ùå Error al responder al callback: {e}")
        
        user_info = ""

        grupos = get_grupos_tutoria(GRUPO_ID_USUARIO=get_usuarios(USUARIO_ID_TELEGRAM=chat_id)[0][USUARIO_ID])
        print(grupos)
        grupos.sort(key=lambda x: x[GRUPO_FECHA], reverse=True)

        if grupos and len(grupos) > 0:
            user_info += "\n*üîµ grupos de tutor√≠a creadas:*\n"

            # Diccionario para traducir los prop√≥sitos a texto m√°s amigable
            propositos = {
                'individual': 'Tutor√≠as individuales',
                'grupal': 'Tutor√≠as grupales',
                'avisos': 'Canal de avisos'
            }

            for grupo in grupos:
                # Obtener prop√≥sito en formato legible
                proposito = propositos.get(grupo[GRUPO_PROPOSITO], grupo[GRUPO_PROPOSITO] or 'General')

                # Obtener asignatura o indicar que es general
                asignatura = grupo[GRUPO_ASIGNATURA] or 'General'

                # Formato de fecha m√°s amigable
                fecha = grupo[GRUPO_FECHA].split(' ')[0] if grupo[GRUPO_FECHA] else 'Desconocida'

                user_info += f"‚Ä¢ *{grupo[GRUPO_NOMBRE]}*\n"
                user_info += f"  üìã Prop√≥sito: {proposito}\n"
                user_info += f"  üìö Asignatura: {asignatura}\n"
                user_info += f"  üìÖ Creada: {fecha}\n\n"
        else:
            user_info += "\n*üîµ No has creado grupos de tutor√≠a todav√≠a.*\n"
            user_info += "Usa /crear_ grupo _ tutoria para crear una nueva grupo.\n"

        # Soluci√≥n para evitar crear un mensaje simulado
        try:
            bot.send_message(chat_id, user_info, parse_mode="Markdown")

            # Si es profesor y tiene grupos, mostrar botones para editar
            if get_usuarios(USUARIO_ID_TELEGRAM=chat_id)[0][USUARIO_TIPO] == USUARIO_TIPO_PROFESOR and grupos and len(grupos) > 0:
                markup = types.InlineKeyboardMarkup(row_width=1)
            
                # A√±adir SOLO botones para editar cada grupo (quitar botones de eliminar)
                for grupo in grupos:
                    grupo_id = grupo[GRUPO_ID]
                
                    markup.add(types.InlineKeyboardButton(
                        f"‚úèÔ∏è grupo: {grupo[GRUPO_NOMBRE]}",
                        callback_data=f"edit_grupo_{grupo_id}"
                    ))
            
                bot.send_message(
                    chat_id,
                    "Selecciona una grupo para gestionar:",
                    reply_markup=markup
                )
        except Exception as e:
            print(f"‚ùå Error al llamar a handle_ver_misdatos: {str(e)}")
            import traceback
            print("üìã Traza de error completa:")
            traceback.print_exc()
            bot.send_message(chat_id, "‚ùå Error al mostrar tus grupos. Intenta usar /ver_misdatos directamente.")

        print("### FIN VER_grupoS CALLBACK ###\n\n")


    @bot.message_handler(commands=['crear_grupo_tutoria'])
    def crear_grupo(message):
        """Proporciona instrucciones para crear un grupo de tutor√≠a en Telegram"""
        chat_id = message.chat.id
        user = get_usuarios(USUARIO_ID_TELEGRAM=message.from_user.id)[0]

        # Verificar que el usuario es profesor
        if not user or user[USUARIO_TIPO] != USUARIO_TIPO_PROFESOR:
            bot.send_message(
                chat_id,
                "‚ùå Solo los profesores pueden crear grupos de tutor√≠a."
            )
            return

        # Instrucciones sin formato especial (sin asteriscos ni caracteres problem√°ticos)
        instrucciones = (
            "üéì C√≥mo crear un grupo de tutor√≠a\n\n"
            "Siga estos pasos para crear un grupo de tutor√≠a efectivo:\n\n"

            "1Ô∏è‚É£ Crear un grupo nuevo en Telegram\n"
            "‚Ä¢ Pulse el bot√≥n de nueva conversaci√≥n\n"
            "‚Ä¢ Seleccione 'Nuevo grupo'\n\n"

            "2Ô∏è‚É£ A√±adir el bot al grupo\n"
            "‚Ä¢ Pulse el nombre del grupo\n"
            "‚Ä¢ Seleccione 'Administradores'\n"
            "‚Ä¢ A√±ada a @UGRBot como administrador\n"
            "‚Ä¢ Active todos los permisos\n\n"

            "3Ô∏è‚É£ Configurar el grupo\n"
            "‚Ä¢ En el grupo, escriba /configurar_grupo\n"
            "‚Ä¢ Siga las instrucciones para vincular la grupo\n"
            "‚Ä¢ Configure el tipo de tutor√≠a\n\n"

            "üìå Recomendaciones para el nombre del grupo\n"
            "‚Ä¢ 'Tutor√≠as [Asignatura] - [Su Nombre]'\n"
            "‚Ä¢ 'Avisos [Asignatura] - [A√±o Acad√©mico]'\n\n"

            "üîî Una vez registrada la grupo podr√°\n"
            "‚Ä¢ Gestionar solicitudes de tutor√≠a\n"
            "‚Ä¢ Programar sesiones grupales\n"
            "‚Ä¢ Enviar avisos autom√°ticos\n"
            "‚Ä¢ Ver estad√≠sticas de participaci√≥n"
        )

        # Crear botones √∫tiles con callback data simplificados
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                "üìù Ver mis grupos actuales",
                callback_data="ver_grupos"  # Simplificado
            ),
            types.InlineKeyboardButton(
                "‚ùì Preguntas frecuentes",
                callback_data="faq_grupo"  # Simplificado
            )
        )

        # Enviar mensaje SIN formato markdown para evitar errores
        try:
            bot.send_message(
                chat_id,
                instrucciones,
                reply_markup=markup
            )
        except Exception as e:
            print(f"Error al enviar instrucciones de creaci√≥n de grupo: {e}")
            bot.send_message(
                chat_id,
                "Para crear un grupo de tutor√≠a: 1) Cree un grupo, 2) A√±ada al bot como administrador, "
                "3) Use /configurar_grupo en el grupo.",
                reply_markup=markup
            )


    @bot.callback_query_handler(func=lambda call: call.data == "volver_instrucciones")
    def handler_volver_instrucciones(call):
        """Vuelve a mostrar las instrucciones originales"""
        chat_id = call.message.chat.id
        user_id = call.from_user.id

        # Depuraci√≥n adicional
        print(f"\n\n### INICIO VOLVER_INSTRUCCIONES CALLBACK ###")
        print(f"üîç Callback data: {call.data}")
        print(f"üë§ User ID: {user_id}, Chat ID: {chat_id}")
        print(f"üìù Message ID: {call.message.message_id}")

        # Responder al callback inmediatamente
        try:
            bot.answer_callback_query(call.id)
            print("‚úÖ Callback respondido correctamente")
        except Exception as e:
            print(f"‚ùå Error al responder al callback: {e}")

        # Soluci√≥n para evitar crear un mensaje simulado
        try:
            print("üîÑ Preparando llamada a crear_grupo...")

            # Crear una clase simple que emule lo necesario de Message
            class SimpleMessage:
                def __init__(self, chat_id, user_id, text):
                    self.chat = types.Chat(chat_id, 'private')
                    self.from_user = types.User(user_id, False, 'Usuario')
                    self.text = text

            # Crear el mensaje simplificado
            msg = SimpleMessage(chat_id, user_id, '/crear_grupo_tutoria')

            # Llamar directamente a la funci√≥n
            print("üîÑ Llamando a crear_grupo...")
            crear_grupo(msg)
            print("‚úÖ crear_grupo llamado con √©xito")
        except Exception as e:
            print(f"‚ùå Error al llamar a crear_grupo: {str(e)}")
            import traceback
            print("üìã Traza de error completa:")
            traceback.print_exc()
            bot.send_message(chat_id, "‚ùå Error al volver a las instrucciones. Intenta usar /crear_grupo_tutoria directamente.")

        print("### FIN VOLVER_INSTRUCCIONES CALLBACK ###\n\n")

    # Handlers para los botones simplificados
    @bot.callback_query_handler(func=lambda call: call.data == "faq_grupo")
    def handler_faq_grupo(call):
        """Muestra preguntas frecuentes sobre creaci√≥n de grupos"""
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        # Depuraci√≥n adicional
        print(f"\n\n### INICIO FAQ_GRUPO CALLBACK ###")
        print(f"üîç Callback data: {call.data}")
        print(f"üë§ User ID: {call.from_user.id}, Chat ID: {chat_id}")
        print(f"üìù Message ID: {message_id}")

        # Responder al callback inmediatamente
        try:
            bot.answer_callback_query(call.id)
            print("‚úÖ Callback respondido correctamente")
        except Exception as e:
            print(f"‚ùå Error al responder al callback: {e}")

        # FAQ sin formato Markdown para evitar problemas de formato
        faq = (
            "‚ùì Preguntas frecuentes sobre grupos de tutor√≠a\n\n"

            "¬øPuedo crear varios grupos para la misma asignatura?\n"
            "No, solamente un grupo para avisos por asignatura y despues una grupo unica para tutorias individuales.\n\n"

            "¬øEs necesario hacer administrador al bot?\n"
            "S√≠, el bot necesita permisos administrativos para poder gestioanr el grupo.\n\n"

            "¬øQui√©n puede acceder al grupo?\n"
            "Depende del tipo: los de avisos acceden todos los matriculados en la asignatura, los de tutor√≠a individual requieren aprobaci√≥n por parte del profeser siempre y cuando se encuentre en horario de tutorias.\n\n"

            "¬øPuedo cambiar el tipo de grupo despu√©s?\n"
            "S√≠, use /ver_misdatos y seleccione la grupo para modificar su prop√≥sito.\n\n"

            "¬øC√≥mo eliminar un grupo?\n"
            "Use /ver_misdatos, seleccione la grupo y elija la opci√≥n de eliminar.\n\n"

            "¬øLos estudiantes pueden crear grupos?\n"
            "No, solo los profesores pueden crear grupos de tutor√≠a oficiales."
        )

        # Bot√≥n para volver a las instrucciones
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("üîô Volver", callback_data="volver_instrucciones"))
        print("‚úÖ Markup de botones creado")

        try:
            print("üîÑ Intentando editar el mensaje actual...")
            # Intentar editar el mensaje actual
            bot.edit_message_text(
                text=faq,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=markup
            )
            print("‚úÖ FAQ enviado con √©xito (mensaje editado)")
        except Exception as e:
            print(f"‚ùå Error al editar mensaje para FAQ: {e}")
            import traceback
            print("üìã Traza de error completa:")
            traceback.print_exc()

            # En caso de error, enviar como mensaje nuevo
            try:
                print("üîÑ Intentando enviar como mensaje nuevo...")
                bot.send_message(
                    chat_id,
                    faq,
                    reply_markup=markup
                )
                print("‚úÖ FAQ enviado con √©xito (mensaje nuevo)")
            except Exception as e2:
                print(f"‚ùå Error al enviar mensaje nuevo: {e2}")
                traceback.print_exc()

        print("### FIN FAQ_GRUPO CALLBACK ###\n\n")
